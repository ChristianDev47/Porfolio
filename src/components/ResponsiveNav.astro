---
import HeaderLink from "./HeaderLink.astro";
import { getLangFromUrl, useTranslations, useTranslatedPath, } from '../i18n/utils';


const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
---

<div class=" lg:hidden w-full px-2 fixed bottom-4 left-0 right-0 m-auto z-[100] flex justify-center items-center animate-fade-up animate-duration-[3000ms]">
  <header class="p-4 mt-2 flex gap-5 justify-center items-center flex-wrap rounded-xl max-w-[45.5rem]  ">
    <HeaderLink class="text__glowing" label='about-me' href={translatePath('/#about-me')}>
      {t('nav.about-me')}
    </HeaderLink>
    <HeaderLink class="text__glowing" label='skills' href={translatePath('/#skills')}>
      {t('nav.skills')}
    </HeaderLink>
    <HeaderLink class="text__glowing" label='education' href={translatePath('/#education')}>
      {t('nav.education')}
    </HeaderLink>
    <HeaderLink class="text__glowing" label='projects' href={translatePath('/#projects')}>
      {t('nav.projects')}
    </HeaderLink>
    <HeaderLink class="text__glowing" label='experience' href={translatePath('/#experience')}>
      {t('nav.experience')}
    </HeaderLink>
    <HeaderLink class="text__glowing" label='certifications' href={translatePath('/#certifications')}>
      {t('nav.certifications')}
    </HeaderLink>
    <HeaderLink class="text__glowing" label='contact' href={translatePath('/#contact')}>
      {t('nav.contact')}
    </HeaderLink>
  </header>
</div>


<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav div div a")
  
    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label")?.toString() === entry.target.id) {
              item.classList.add("text-white");
            } else {
              item.classList.remove("text-white");
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "50px 0px -50px 0px",
      threshold: 0.1,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>

<style>
  header {
    animation: nav-shadown 1s linear both;
    animation-range: 0 100px;
  }

  header {
    @apply bg-[#14181c]/90;
  }

  @keyframes nav-shadown {
    0% {
      @apply bg-gray-800/0 ;
    }
    to {
      @apply shadow-lg ring-1 backdrop-blur-md ring-white/10;
    }
  }
</style>