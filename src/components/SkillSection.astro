---
import type { JSX } from 'astro/jsx-runtime';
interface Props {
  title: string;
  skills: JSX.Element[];
  val: string;
}

const { title, skills, val } = Astro.props;
---

<div class="w-full grid grid-cols-3">
  <div class="sm:text-[40px] text-[28px] leading-6 lg:col-span-1 col-span-3 lg:mb-0 mb-[2.9rem] lg:text-start text-center">
    <p class="text-[#ffffff] font-semibold">{title}</p>
  </div>
  <div class="w-full lg:col-span-2 col-span-3">
    <div class="grid md:grid-cols-5 sm:grid-cols-4 grid-cols-3 gap-x-2 gap-y-3">
      {
        skills.map((Skill) => (
          <div class="group relative flex h-[30px] lg:ml-0 ml-3 shrink-0 items-center overflow-hidden rounded-md sm:px-3 px-1 leading-none outline-none xl:py-[5px] after:opacity-0 space-x-1 text__glowing  cursor-pointer group text__show transition duration-200" >
            <Skill.icon class="size-6 text-[#ced1d4] group-hover:text-[#4ade80]"/>
            <span class="z-20 bg-gradient-to-b from-white via-white via-25% to-white/60 bg-clip-text text-sm leading-none tracking-tighter text-transparent xl:text-[14px] lg:text-xs group-hover:text-[#4ade80] py-1">{Skill.name}</span>
          </div>
        ))
      }
    </div>
    <div class="mt-3.5 h-px w-full overflow-hidden bg-gray-new-15 " aria-hidden="true">
      <div id={`progress-bar-${val}`} class="progress-bar h-full w-full origin-left scale-x-0 bg-[linear-gradient(90deg,rgba(228,229,231,0.10)_0%,#E4E5E7_100%)]  transition-[transform,opacity] duration-[400ms] ease-linear opacity-100"></div>
    </div>
  </div>
</div>

<style>
  .text__show {
    transition: text-shadow 0.3s ease;
  }
  .text__show:hover {
    text-shadow:
    1px 1px 20px #4ade80;
  }
  .progress-bar {
    transform: scaleX(0);
    opacity: 1; 
    transition: transform 1s ease-in-out, opacity 1s ease-out;
    background: linear-gradient(90deg, rgba(228, 229, 231, 0.10) 0%, #E4E5E7 100%);
  }

  .progress-bar.active {
    transform: scaleX(1); 
    opacity: 1; 
  }

  .progress-bar.inactive {
    transform: scaleX(0); 
    opacity: 0;
  }
</style>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const progressBars = document.querySelectorAll(".progress-bar");
  let currentIndex = 0;

  function activateNextBar() {
    if (currentIndex > 0) {
      const previousBar = progressBars[currentIndex - 1];
      previousBar.classList.add("inactive");
    }

    if (currentIndex < progressBars.length) {
      const bar = progressBars[currentIndex];
      bar.classList.remove("inactive"); 
      bar.classList.add("active"); 
      currentIndex++;

      setTimeout(activateNextBar, 2000); 
    }
  }

  activateNextBar();
});

</script>
